
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT
{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # These tool definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first guy is the "Front Man".  He is identified as such because
        # he is the only one with no parameters in his function definition,
        # and therefore he needs to talk to the outside world to get things rolling.
        {
            "name": "news_coordinator",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {

                # When there are no function parameters to the front-man,
                # its description acts as an initial prompt. 

                "description": """
I can help you determine a criteria based on a provided news article.
Give me a date, region, and news article URL and I will provide you with a score for a given criteria.
"""
            },

            "instructions": """
You are the scorer of criteria.
You will be asked to score a criteria based on a date, region, and news article passed in by the user.
You will use your downchain tools to extract relevant information from the article and find relevant historical data from the archive. Then you will analyze the article.
Give your response to the user in the format: "score, reasoning".
""",
            "tools": ["news_analyzer", "archivist"]
        },
        # ARCHIVIST
        {
            "name": "archivist",
            "function": {
                "description": "Returns relevant historical data from the archive for a given date, region, and criteria.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "A string containing the date."
                        },
                        "region": {
                            "type": "string",
                            "description": "A string containing the region."
                        },
                        "criteria": {
                            "type": "string",
                            "description": "The criteria by which the article is being scored."
                        }
                    },
                    "required": ["date", "region", "criteria"]
                }
            },
            "instructions": """
You are an archivist.
You will be passed a date, region, and criteria.
First you will query the PersistorReaderTool using the date, region, and criteria.
Then you will output the retrieved historical data from the archive in the format you received it in.
If no data is found, output that you were not able to find any historical data for the given date, region, and criteria.
""",
            "tools": [PersistorReaderTool]
            "command": "Retrieve historical data from the archive for the given date, region, and criteria. If no data is found, output that you were unable to find any.",
        },
        # PERSISTOR READER TOOL
        {
            "name": "PersistorReaderTool",
            "function": {
                "description": """
Loads relevant historical data from the archive for a given date, region, and criteria.
The date, region, and criteria must be passed as arguments.
You MUST call this tool to retrieve relevant historical data from the archive.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "The date."
                        },
                        "region": {
                            "type": "string",
                            "description": "The region."
                        },
                        "criteria": {
                            "type": "string",
                            "description": "The criteria to rate the article with."
                        },
                    },
                    "required": ["date", "region", "criteria"]
                }
            },
            "class": "persistor_reader.PersistorReaderTool",
        },
        # NEWS ANALYZER
        {
            "name": "news_analyzer",
            "function": {
                "description": "Returns a score for a given criteria based on the guidelines and news article, possibly using historical data to inform the score.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "article_url": {
                            "type": "string",
                            "description": "A string containing the url to the news article to be loaded and then analyzed."
                        },
                        "date": {
                            "type": "string",
                            "description": "A string containing the date."
                        },
                        "region": {
                            "type": "string",
                            "description": "A string containing the region."
                        },
                        "criteria": {
                            "type": "string",
                            "description": "The criteria that should be measured using the article and, if present, the historical data as well."
                        },
                        "historical_data": {
                            "type": "string",
                            "description": "A string containing historical data relevant to the date, region, and criteria."
                        },
                    },
                    "required": ["article_url", "date", "region", "criteria", "historical_data"]
                }
            },
            "instructions": """
You are a news article analyzer.
You will be passed a news article name and a criteria to score it by.
The first thing you will do is to scrape the article from the provided article_url using the WebPageReaderTool.
You will analyze the article and return a score for the given criteria, where 0 is the lowest and 3 is the highest.
Here are some guidelines for critieria you may be asked to score by and how you should score them:
- "School Closing" - 0: no measures, 1: recommend closing or all schools open with alterations resulting in significant differences compared to non-Covid-19 operations, 2: require closing (only some levels or categories, eg just high school, or just public schools), 3: require closing all levels
You will explain your reasoning for the score you give in relation to the guidelines.
Your output will be the score followed by your reasoning.
""",
            "tools": [WebPageReaderTool]
            "command": "Analyze the article and return a score from 0-3 for the given criteria, where 0 is the lowest and 3 is the highest. Explain your reasoning for the score you give. Your output will be the score followed by your reasoning.",
        },
        # WEBPAGE READER TOOL
        {
            "name": "WebPageReaderTool",
            "function": {
                "description": """
Scrapes the text of a news article from a provided article_url.
The url pointing to the news article must be passed as an argument.
You MUST call this tool to scrape a specified news article.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "article_url": {
                            "type": "string",
                            "description": "The url of the news article to be scraped."
                        },
                    },
                    "required": ["article_url"]
                }
            },
            "class": "webpage_reader.WebPageReaderTool",
        },
    ]
}
