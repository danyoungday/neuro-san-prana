
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT
{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # These tool definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first guy is the "Front Man".  He is identified as such because
        # he is the only one with no parameters in his function definition,
        # and therefore he needs to talk to the outside world to get things rolling.
        {
            "name": "news_coordinator",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {

                # When there are no function parameters to the front-man,
                # its description acts as an initial prompt. 

                "description": """
I can help you determine the level of policy for a date and region based on a provided news article.
Give me a date, region, policy, and news article URL and I will provide you with a policy score for the date and region based on the news article.
"""
            },

            "instructions": """
You are the scorer of policies.
You will be asked to score the level of policy on a given date in a given region using a news article passed in by the user.
Before you do anything, first find relevant historical data from the archive by requesting data from the archivist tool.
DO NOT call the news_analyzer tool until you have attempted to retrieve historical data. If no historical data is found, continue with the news_analyzer tool and pass "no historical data found" in the historical_data parameter.
Then you will analyze the article, using the news_analyzer to compute a score for the policy.
Once you have computed the score, ask the archivist tool to save the new data to archive.
Finally, return your output to the user nicely. Start with a sentence summary of the score, then provide your reasoning. Format the output nicely in markdown.
""",
            "tools": ["news_analyzer", "archivist"]
        },
        # ARCHIVIST
        {
            "name": "archivist",
            "function": {
                "description": "Manages the persistent archive by either returning relevant historical data or saving new data to the archive.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "A string containing the date to score the level of policy on."
                        },
                        "region": {
                            "type": "string",
                            "description": "A string containing the region to score the policy for."
                        },
                        "policy": {
                            "type": "string",
                            "description": "The policy that the article is being scored for."
                        },
                        "score": {
                            "type": "string",
                            "description": "The score for the policy on the given date in the given region."
                        }
                    },
                    "required": ["date", "region", "policy"]
                }
            },
            "instructions": """
You are an archivist.
If asked to retrieve some historical data, you will be passed a date, region, and policy.
    First you will query the PersistorReaderTool using the date, region, and policy.
    Then you will output the retrieved historical data from the archive in the format you received it in.
    If no data is found, output that you were not able to find any historical data for the given date, region, and policy.
If asked to save new data, you will be passed a date, region, policy, and score.
    First you will call the PersistorWriterTool using the date, region, policy, and score.
    Then you will output that you have saved the new data to the archive.
    If the data was not saved, output that you were not able to save the new data to the archive.
""",
            "tools": [PersistorReaderTool, PersistorWriterTool]
            "command": "Retrieve historical data from the archive for the given date, region, and policy. If no data is found, output that you were unable to find any.",
        },
        # PERSISTOR READER TOOL
        {
            "name": "PersistorReaderTool",
            "function": {
                "description": """
Loads relevant historical data from the archive for a given date, region, and policy.
The date, region, and policy must be passed as arguments.
Returns all scores for the given policy and region before or on the given date.
Returns the historical data in the format: "date:<date>, region:<region>, policy:<policy>, score:<score>" in rows.
You MUST call this tool to retrieve relevant historical data from the archive.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "A string containing the date to score the level of policy on."
                        },
                        "region": {
                            "type": "string",
                            "description": "A string containing the region to score the policy for."
                        },
                        "policy": {
                            "type": "string",
                            "description": "The policy that the article is being scored for."
                        }
                    },
                    "required": ["date", "region", "policy"]
                }
            },
            "class": "persistor_reader.PersistorReaderTool",
        },
        # PERSISTOR WRITER TOOL
        {
            "name": "PersistorWriterTool",
            "function": {
                "description": """
Writes newly scored data to the archive for a given date, region, policy, and score.
The date, region, policy, and score must be passed as arguments.
You MUST call this tool to store newly scored data to the historical data archive.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "A string containing the date to score the level of policy on."
                        },
                        "region": {
                            "type": "string",
                            "description": "A string containing the region to score the policy for."
                        },
                        "policy": {
                            "type": "string",
                            "description": "The policy that the article is being scored for."
                        },
                        "score": {
                            "type": "string",
                            "description": "The score for the policy on the given date in the given region."
                        }
                    },
                    "required": ["date", "region", "policy", "score"]
                }
            },
            "class": "persistor_writer.PersistorWriterTool",
        },
        # NEWS ANALYZER
        {
            "name": "news_analyzer",
            "function": {
                "description": "Returns a score for a given policy on a given date in a given region, based on the guidelines, news article, and historical data.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "article_url": {
                            "type": "string",
                            "description": "A string containing the url to the news article to be loaded and then analyzed."
                        },
                        "date": {
                            "type": "string",
                            "description": "A string containing the date to score the level of policy on."
                        },
                        "region": {
                            "type": "string",
                            "description": "A string containing the region to score the policy for."
                        },
                        "policy": {
                            "type": "string",
                            "description": "The policy whos level should be measured for the given date and region using the article and historical data."
                        },
                        "historical_data": {
                            "type": "string",
                            "description": "A string containing historical data relevant to the date, region, and criteria."
                        },
                    },
                    "required": ["article_url", "date", "region", "policy", "historical_data"]
                }
            },
            "instructions": """
You are a news article analyzer.
You are provided a date and region which you will score the level of policy for using a news article and historical data.
The first thing you will do is to scrape the article from the provided article_url using the WebPageReaderTool.
Next, you will load in the guidelines used to provide a score by calling the ExtractDocs tool.
Then, you will analyze the article and return a score for the given policy on the given date in the given region, based on the guidelines, news article, and historical data.
Only use your own internal knowledge if the article, historical data, and guidelines do not provide enough information to score the policy. If you do so, make sure to state that you are using your own internal knowledge clearly.
When you assign your score, do so FOR THE GIVEN DATE AND REGION. If the article contains information about the policy for a different date or region, you should take it into account, but remember your final score is ON THE DATE AND REGION PASSED IN.
For example, if the article says a policy will take effect in November 2022, but the date you are scoring is in October 2022, you should not assign a score based on the future policy. Or if the article is for India but the region you are scoring is the US, you should not assign a score based on the Indian policy.
You will explain your reasoning for the score you give in relation to the guidelines AND the historical data. If you do not use the historical data in your reasoning, you should say that you did not use it.
Your output will be the score followed by your reasoning. Return your reasoning for each step in the process.
""",
            "tools": [WebPageReaderTool, ExtractDocs]
            "command": "Analyze the article and return a score for the given policy on the given date in the given region, based on the guidelines, news article, and historical data. You will explain your reasoning for the score you give in relation to the guidelines and the historical data.",
        },
        # WEBPAGE READER TOOL
        {
            "name": "WebPageReaderTool",
            "function": {
                "description": """
Scrapes the text of a news article from a provided article_url.
The url pointing to the news article must be passed as an argument.
You MUST call this tool to scrape a specified news article.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "article_url": {
                            "type": "string",
                            "description": "The url of the news article to be scraped."
                        },
                    },
                    "required": ["article_url"]
                }
            },
            "class": "webpage_reader.WebPageReaderTool",
        },
        # DOC EXTRACTOR TOOL
        {
            "name": "ExtractDocs",
            "function": {
                "description": """
    Returns the text contents of all the files.
    You MUST call this tool to read the text content of files.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "directory": {
                            "type": "string",
                            "description": "The directory to read the text content of files from."
                        },
                    },
                    "required": []
                }
            },
            "class": "extract_docs.ExtractDocs"
        },
    ]
}
